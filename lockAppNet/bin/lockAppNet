#!/system/bin/sh
prefix=
hostsconfig=$prefix/system/etc/hosts
configfile=$prefix/system/etc/lockAppNet.conf
configfile2=$prefix/data/system/lockAppNet.conf

[ -f $configfile2 ] && configfile=$configfile2
[ -f $configfile -o -f $configfile2 ] || exit 0

##############################################################
day=`date +%u`
today=`date +%m%d`
time=$(( $(date +%s) $(date +%z|cut -c 1)  $(($(date +%z|cut -c 2)*3600+$(date +%z|cut -c 3)*3600+$(date +%z|cut -c 4)*600+$(date +%z|cut -c 5)*60)) ))
timeinday=$(($time % 86400))
nextmorning=$((6*3600))
readonly=0
[ -w $prefix/system ] && readonly=1
ruleClassName=""
whitelist=""
globalNet=0
ntpserver="stdtime.gov.hk"
dns="114.114.114.114"
time_synced=1

#check network lock is opened,if opened,do not disable network
netlock=`getprop android.network.lockAppNet`
if [  "$netlock" = "" ]; then
      netlock=1
      setprop android.network.lockAppNet 1
elif [ "$netlock" = "0" ]; then
      local offtime=`getprop android.lockAppNet.offtime`
      if [ "$offtime" != "" ]; then
          local nowtime=`date +%s`
          local timediff=$(($nowtime - $offtime))
          if [ $timediff -ge 3600 -o $timediff -lt 0 ]; then
               setprop android.lockAppNet.offtime ""
               setprop android.network.lockAppNet 1
               netlock=1
          fi
      fi
fi

if [ ! -d $prefix/data/crontabs/lockAppNet ]; then
	mkdir $prefix/data/crontabs
	mkdir $prefix/data/crontabs/lockAppNet
fi
echo "" > $prefix/data/crontabs/lockAppNet/root
#############################################################
##check busybox grep sed cut 
errorflag=0
if ! which busybox >/dev/null; then 
   echo "ERROR: Need busybox!"
   errorflag=1
fi
if ! which grep >/dev/null; then 
   echo "ERROR: Need grep!"
   errorflag=1
fi
if ! which sed >/dev/null; then 
   echo "ERROR: Need sed!"
   errorflag=1
fi
if ! which cut >/dev/null; then 
   echo "ERROR: Need cut!"
   errorflag=1
fi


remove()
{
   [ $# -lt 1 ] && return
   if [ -d "$1" ]; then
      rm -r "$1"
   elif [ -f "$1" ]; then
      rm "$1"
   fi
}
getAppUID()
{
    [ $# -lt 1 ] && return 1
    if grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list >/dev/null 2>/dev/null; then
        grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list  | cut -d' ' -f2 | sed ':a;N;s/\n/,/;ba'
        return 0
    fi
    return 1
}

getAppName()
{
    [ $# -lt 1 ] && return 1
    if grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list >/dev/null 2>/dev/null; then
        grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list  | cut -d' ' -f1 | sed ':a;N;s/\n/,/;ba'
        return 0
    fi
    return 1
}

ApplyWhiteList()
{
   whitelist=$(cat $prefix/data/property/lockAppNet.whitelist)
   [ "$whitelist" != "" ] && echo "AppWhiteList:        $whitelist"
   itemcount=$(echo $whitelist | grep -o "," | wc -l)
   itemcount=$((itemcount + 1))
   [ "$whitelist" = "" ] && return 0
   local appname=""
   local appuid=""
   i=0
   until [ $i -lt 0 -o $i -gt $itemcount ]; do
       appname=$(echo "$whitelist" | cut -d, -f$i) 
       if [ $? -eq 1 -o "$appname" = "" ]; then 
              i=$(expr $i + 1)
              continue
       fi 
       appuid=$(getAppUID $appname)
       if [ $? -eq 1 -o "$appuid" = "" ]; then 
              i=$(expr $i + 1)
              continue
       fi 
       k=0
       uidcount=$(echo $appuid | grep -o "," | wc -l)
       uidcount=$((uidcount + 1))
       until [ $k -gt $uidcount ]; do
            uiditem=$(echo $appuid| cut -d, -f$uidcount)
            iptables -A OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT
            k=$(expr $k + 1)
       done
       i=$(expr $i + 1)
   done
}

#mkcrontab(vday,vhour,vmin,vcommand)
mkcrontab()
{
  	if [ $# -lt 4 ]; then
		return 
  	fi
  	local vday="$1"
  	local vhour="$2"
  	local vmin="$3"
        local vcommand="$4"
        [ "$vcommand" = "" ] && vcommand="$0"
        [ "$vday" = "" ] && vday="*"
        [ "$vhour" = "" ] && vhour="*"
        [ "$vmin" = "" ] && vmin="*"
        [ "$vday" = "*" -a "$vhour" = "*" -a "$vmin" = "*" ] && return
        local newitem="$vmin $vhour      *      *  $vday   $0"
        local items=$(echo "$newitem" | sed "s/\*/\\\*/g")
	if ! grep  -q "$items" $prefix/data/crontabs/lockAppNet/root; then
             echo "$newitem" >> $prefix/data/crontabs/lockAppNet/root
        fi
}
now_in_time()
{
    if [ $# -lt 1 ]; then
        echo 1
        return 1
    fi
    local plans="$1"
    local timeif=1
    local j=1
    local i_plan_count=$(( $(echo "$plans" | grep  -o ','| wc -l) + 1 ))
    
    until [ $j -lt 0 -o $j -gt ${i_plan_count} ]; do
    #        if [ $j -gt 1 ]; then
    #           echo "$plans" | grep -q ","
    #           [ $? -ne 0 ] && break
    #        fi
            local plani=$(echo "$plans"|cut -d, -f$j)
            [ "$plani" = "" ] && break;
            local plan_time=$(echo "$plani"|sed -e "s/ \{2,\}/ /g"|cut -d' ' -f1)
            local plan_day=$(echo "$plani"|sed -e "s/ \{2,\}/ /g"|cut -d' ' -f2)
            local plan_opt=$(echo "$plani"|sed -e "s/ \{2,\}/ /g"|cut -d' ' -f3)
            local ptime1=""          
            local ptime2=""
	    local ptime1_hour=""
	    local ptime1_min=""
	    local ptime2_hour=""
	    local ptime2_min=""
            local timeifdi=""
            local timeifti=""
            if [ "$plan_time" != "" ]; then
                ptime1=$(echo "$plan_time"|cut -d- -f1)
                if echo "$plan_time"|grep -q "-"; then
                    ptime2=$(echo "$plan_time"|cut -d- -f2)
                fi
                if echo "$ptime1" | grep -q ":"; then
                    ptime1_hour=$(echo "$ptime1"|cut -d: -f1)
                    ptime1_min=$(echo "$ptime1"|cut -d: -f2)
                    ptime1=$(($ptime1_hour*3600+$ptime1_min*60))
                elif [ "$ptime1" != "*" ]; then
                    ptime1=$(($ptime1*3600))
                fi
                if echo "$ptime2" | grep -q ":"; then
                    ptime2_hour=$(echo "$ptime2"|cut -d: -f1)
                    ptime2_min=$(echo "$ptime2"|cut -d: -f2)
                    ptime2=$(($ptime2_hour*3600+$ptime2_min*60))
                elif [ "$ptime2" != "*" -a "$ptime2" != "" ]; then
                    ptime2=$(($ptime2*3600))
                fi
            fi

            local pday2=""
            local pday1=""

            if [ "$plan_day" != "" ]; then            
                 pday1=$(echo "$plan_day"|cut -d- -f1)
                 if echo "$plan_day"|grep -q "-"; then
                     pday2=$(echo "$plan_day"|cut -d- -f2)
                 fi
            fi

            [ "$ptime1_hour" != "" -a "$ptime1_min" != "" ] && mkcrontab "$plan_day" "$ptime1_hour" "$ptime1_min" "$0"
            [ "$ptime2_hour" != "" -a "$ptime2_min" != "" ] && mkcrontab "$plan_day" "$ptime2_hour" "$ptime2_min" "$0"
            [ "$ptime2_hour" != "" -a "$ptime2_min" != ""  -a "$plan_opt" != "-" ] && mkcrontab "$plan_day" "$ptime1_hour-$ptime2_hour" "*/10" "$0"

            if [ $timeif -eq 0 -o $timeif -eq 2 ]; then
                    j=`expr $j + 1`
                    continue
            fi
            if [ "$pday1" != "*" -a "$pday1" != "" ]; then
                if [ "$pday2" = "" ]; then
                    timeifdi="$day -eq $pday1"
                else
                    timeifdi="$day -ge $pday1 -a $day -le $pday2"
                fi
            elif [ "$pday1" = "*" ]; then
                timeifdi=0
            fi

            if [ "$ptime2" = "" -a "$ptime1" != "*" ]; then
                timeifti="$timeinday -ge $ptime1 -o $timeinday -le $nextmorning"
            elif [ "$ptime1" != "*" ]; then
                if [ $ptime2 -ge $ptime1 ]; then
                    timeifti="$timeinday -ge $ptime1 -a $timeinday -le $ptime2"
                else
                    timeifti="$timeinday -ge $ptime1 -o $timeinday -le $ptime2"
                fi
            elif [ "$ptime1" == "*" ]; then
                timeifti=0
            fi
            local timeifi=1
            if [ "$timeifdi" != "" -a "$timeifti" != "" ]; then
                [ $timeifdi ] && [ $timeifti ] && timeifi=0
            elif [ "$timeifdi" != "" ]; then
                [ $timeifdi ] && timeifi=0
            elif [ "$timeifti" != "" ]; then
                [ $timeifti ] && timeifi=0
            else
                j=`expr $j + 1`
                continue
            fi

            if [ $timeifi -eq 0 ]; then
                if [ "$plan_opt" = "-" ]; then
                   timeif=2
                else
                   timeif=0
                fi
            fi
            j=`expr $j + 1`
    done
    [ "$timeif" -eq 2 ] && timeif=1
    echo $timeif
}

getServerIP()
{
    [ $# -lt 1 ] && return
    if echo "$1" | grep -q "^[[:digit:]]\{,3\}\.[[:digit:]]\{,3\}\.[[:digit:]]\{,3\}\.[[:digit:]]\{,3\}"; then
	echo $1
	return 0
    fi
    local ns=$(nslookup "$1" "$dns" 2>/dev/null | sed "1,3d" | grep "Address" | grep -v ":\{2,\}" | cut -d: -f2 | sed "s/^ //g" | cut -d" " -f1)
    if echo $ns | grep -v 'nslookup'; then
       echo $ns
       return 0
    fi
    return 1
}
###############################################################
setprop lockAppNet.conf.block ""
setprop lockAppNet.whitelist.imported ""

ntpServerIP=`getprop android.lockAppNet.ntpServerIP`

cat ${configfile} | while read Line; do
   Line=$(echo "$Line" | sed "s/#.*$//g")
   if echo "$Line" | grep -q "^[[:space:]]*#"; then
        continue;
   elif echo "$Line" | grep -q "^[[:space:]]*$"; then
        continue;
   fi
   if echo "$Line" |  grep -q "[[:space:]]*\[\{1,\}.*\]\{1,\}[[:space:]]*$"; then
        blockname=$(echo "$Line"|sed "s/[[:space:]]*\[\{1,\}[[:space:]]*\(.*\)[[:space:]]*\]\{1,\}[[:space:]]*$/\1/")
        setprop lockAppNet.conf.block "$blockname"
        continue;
   fi
   blockname=$(getprop lockAppNet.conf.block)
   lockhost=$(echo "$Line"|sed -e "s/\([[:graph:]]*\)[[:space:]]*\(.*\)/\1\$\2"/)
   [ "$lockhost" = "" ] && break
   if ! echo "${lockhost}" | grep -q "\$" ; then 
        continue
   fi
   hostname=$(echo "${lockhost}"|cut -d$ -f1)
   rulename=""
   if [ "$hostname" = "HOLIDAYS" -a "$blockname" = "Main" ]; then
       holidays=$(echo "${lockhost}"|cut -d$ -f2)
       j=1
       until [ $j -lt 0 -o $j -gt 100 ]; do
           if [ $j -gt 1 ]; then
               echo "$holidays" | grep -q ","
               [ $? -ne 0 ] && break
           fi
           holidayi=$(echo "$holidays" | cut -d, -f$j)
           [ "$holidayi" = "" ] && break
           holidayi1=$(echo "$holidayi" | cut -d- -f1)
           holidayi2=""
           if echo "$holidayi" | grep -q "-"; then
                 holidayi2=$(echo "$holidayi" | cut -d- -f2)
                 if [ $today -ge $holidayi1 -a $today -le $holidayi2 ]; then
                     ruleClassName="holiday"
                     break;
                 fi
           elif [ $today -eq $holidayi1 ]; then
                 ruleClassName="holiday"
                 break;
           fi
           j=$(expr $j + 1)
       done
       continue
   elif [ "$hostname" = "CONFIG_URL" -a $# -gt 1 -a "$1" = "-u"  -a "$blockname" = "Main" ]; then
       config_url=$(echo "${lockhost}" | cut -d$ -f2)
       if wget -O $prefix/data/system/lockAppNet.conf.tmp  ${config_url}; then
            mv $prefix/data/system/lockAppNet.conf.tmp $prefix/data/system/lockAppNet.conf
       fi
       exit
   elif [ "$hostname" = "NTPSERVER" -a "$blockname" = "Main" -a "$ntpServerIP" = "" ]; then
       local ntpservername=$(echo "${lockhost}"|cut -d$ -f2)
       ntpserver=$(getServerIP "$ntpservername")
       setprop android.lockAppNet.ntpServerIP "$ntpserver"
       ntpServerIP=$ntpserver
       continue
   elif [ "${hostname:0:13}" = "APP_WHITELIST"  -a "$blockname" = "Main" ]; then
        [ -f $prefix/data/property/lockAppNet.whitelist ] && whitelist=$(cat $prefix/data/property/lockAppNet.whitelist)
        [ "$whitelist" != "" ] && whitelist="${whitelist},"
	[ _$(getprop lockAppNet.whitelist.imported) = _1 ] && remove $prefix/data/property/lockAppNet.whitelist
        [ -f $prefix/data/property/lockAppNet.whitelist ] || touch $prefix/data/property/lockAppNet.whitelist
        echo "$whitelist"$(echo "${lockhost}"|cut -d$ -f2) >> $prefix/data/property/lockAppNet.whitelist
	setprop lockAppNet.whitelist.imported 1
        #echo "Apply: $Line"
        continue
   elif [ "$blockname" = "Network" ]; then
   #######################################################
       if [ $time_synced -eq 1 ]; then
            if [ "$ntpServerIP" = "" ]; then
	       ntpserver=$(getServerIP "$ntpservername")
               if [ "$ntpserver" != "" ]; then
       	          setprop android.lockAppNet.ntpServerIP "$ntpserver"
       	          ntpServerIP=$ntpserver
               fi
            fi
            local r=$(ps | grep -q rdate;echo $?)
            [ $r -eq 1 -a "$ntpServerIP" != "" ] && rdate -s $ntpServerIP &
            time_synced=0
       fi
      
       if echo "$hostname" | grep -q ":"; then
           rulename=$(echo "$hostname" | cut -d\: -f1)
           hostname=$(echo "$hostname" | cut -d\: -f2)
       fi
       skipme=0
       if [ "$ruleClassName" = "" -o  "$ruleClassName" = "default" ]; then
           [ "$rulename" != "" -a "$rulename" != "default" ] && skipme=1
       elif [ "$ruleClassName" != "$rulename" ]; then
           skipme=1
       fi
       if [ $skipme -eq 1 ]; then
           echo "Skip : $Line"
           continue
       fi
       if [ $netlock -eq 0 ]; then
            echo "Disable Rule: $Line"
       elif [ $netlock -eq 1 ]; then
            echo "Apply Rule: $Line"
       fi
       plans=$(echo "${lockhost}"|cut -d$ -f2)
       if [ "${hostname}" != "*" ]; then
           if ! grep -q "127\.0\.0\.1.*${hostname}" ${hostsconfig}; then
               [ $readonly -eq 0 ] && mount -o remount,rw $prefix/system
               [ -f ${hostsconfig} ] || echo "" >> ${hostsconfig}
               echo "127.0.0.1      ${hostname}" >> ${hostsconfig}
           fi
       fi
       timeif=1
       timeif=$(now_in_time "$plans")

       globalNet=$(getprop lockAppNet.globalNet)
       if [ $timeif -eq 1 -a $netlock -eq 1 ] ; then
             if [ "${hostname}" != "*" ]; then
                 if grep -q "^#.*${hostname}" ${hostsconfig}; then
                     [ $readonly -eq 0 ] && mount -o remount,rw $prefix/system
                     sed -e "s/#*\([^#]*${hostname}.*\)/\1/g" -i ${hostsconfig}
                 fi
                 echo "     $hostname===>disabled"
             elif [ "$globalNet" != "1" -a "$globalNet" != "2" ]; then
                 setprop lockAppNet.globalNet 1
                 iptables -F
                 iptables -P OUTPUT DROP
                 iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
                 # allow DNS
                 ##iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
                 iptables -A OUTPUT -p 17 -m udp --dport 53 -j ACCEPT
                 # allow SNTP/NTP
                 ##iptables -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT
                 ##iptables -A OUTPUT -p tcp -m tcp --dport 123 -j ACCEPT
                 iptables -A OUTPUT -p 17 -m udp --dport 123 -j ACCEPT
                 iptables -A OUTPUT -p 6 -m tcp --dport 123 -j ACCEPT
                 # all rdate
                 ##iptables -A OUTPUT -p udp -m udp --dport 37 -j ACCEPT
                 ##iptables -A OUTPUT -p tcp -m tcp --dport 37 -j ACCEPT
                 iptables -A OUTPUT -p 17 -m udp --dport 37 -j ACCEPT
                 iptables -A OUTPUT -p 6 -m tcp --dport 37 -j ACCEPT
                 # allow ping
                 #iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT
                 iptables -A OUTPUT -p 1 -j ACCEPT
                 ApplyWhiteList
                 echo "      **Network is disabled!"
             fi
        else
             if [ "${hostname}" != "*" ]; then
                 if ! grep -q "^#.*${hostname}" ${hostsconfig}; then
                     [ $readonly -eq 0 ] && mount -o remount,rw $prefix/system
                     sed -e "s/\([^#]*${hostname}.*\)/#\1/g" -i ${hostsconfig}
                 fi
                 echo "      $hostname===>enabled"
             elif [ "$globalNet" != "1" -a "$globalNet" != "2" ]; then
                 setprop lockAppNet.globalNet 2
                 iptables -F
                 iptables -P OUTPUT ACCEPT
                 echo "      **Network is enabled!"
             fi
        fi
    elif  [ "$blockname" = "Application" ]; then
    #################################################
       if [ $time_synced -eq 1 ]; then
            if [ "$ntpServerIP" = "" ]; then
	       ntpserver=$(getServerIP "$ntpservername")
               if [ "$ntpserver" != "" ]; then
       	          setprop android.lockAppNet.ntpServerIP "$ntpserver"
       	          ntpServerIP=$ntpserver
               fi
            fi
            local r=$(ps | grep -q rdate;echo $?)
            [ $r -eq 1 -a "$ntpServerIP" != "" ] && rdate -s $ntpServerIP &
            time_synced=0
       fi

       appname=${hostname}
       appuid=$(getAppUID $appname)
       if [ $? -eq 1 -o "$appuid" = "" ]; then
              continue
       fi
       k=0
       uidcount=$(echo $appuid | grep -o "," | wc -l)
       uidcount=$((uidcount + 1))
       plans=$(echo "${lockhost}"|cut -d$ -f2)
       timeif=1
       until [ $k -ge $uidcount ]; do
            uiditem=$(echo $appuid| cut -d, -f$uidcount)
            timeif=$(now_in_time "$plans")

            if [ "$timeif" = "1" -a $netlock -eq 1 ]; then
                 iptables -D OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT > /dev/null 2>/dev/null
                 iptables -A OUTPUT -m owner --uid-owner  $uiditem -j REJECT
                 echo "   --Disabled $appname"
            else
                 iptables -D OUTPUT -m owner --uid-owner  $uiditem -j REJECT > /dev/null 2>/dev/null
                 iptables -A OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT
                 echo "   --Enabled $appname"
            fi
            k=$(expr $k + 1)
       done

    fi

done
setprop lockAppNet.globalNet ""
setprop lockAppNet.conf.block ""
remove $prefix/data/property/lockAppNet.globalNet
remove $prefix/data/property/lockAppNet.whitelist
         
[ $readonly -eq 0 -a -w $prefix/system ] && mount -o remount,ro $prefix/system


exit 0
