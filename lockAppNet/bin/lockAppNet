#!/system/bin/sh
prefix=""
hostsconfig=$prefix/system/etc/hosts
configfile=$prefix/system/etc/lockAppNet.conf
configfile2=$prefix/data/system/lockAppNet.conf
crontabfile=$prefix/data/crontabs/lockAppNet/root
LOGFILE=$prefix/data/lockAppNet.log
OUTPUT="/dev/tty"
crontabs=""
daemon=0
debug=0

[ -f $configfile2 ] && configfile=$configfile2
[ -f $configfile -o -f $configfile2 ] || exit 0

setprop android.lockAppNet.debug ""
if [ $# -ge 1 ]; then
    for argv in $*; do
        if [ "$argv" = "-debug" ]; then
           setprop android.lockAppNet.debug 1
           debug=1
        elif [ "$argv" = "-d" ]; then
           daemon=1
        fi
    done
fi
lockAppNetPID=$(getprop android.lockAppNet.pid)
if [ "$lockAppNetPID" != "" -a -d /proc/$lockAppNetPID ]; then
        echo "Warnning: $0 already is running(PID=$lockAppNetPID),exit now!"
        [ $# -gt 1 -a "$1" = "-debug" ] && setprop android.lockAppNet.debug 1
        exit 1
fi

echo "--------------------------------------"
echo "   user: `whoami`   PID: $$"
setprop android.lockAppNet.pid $$
##############################################################
day=`date +%u`
today=`date +%m%d`
time=$(( $(date +%s) $(date +%z|cut -c 1)  $(($(date +%z|cut -c 2)*3600+$(date +%z|cut -c 3)*3600+$(date +%z|cut -c 4)*600+$(date +%z|cut -c 5)*60)) ))
timeinday=$(($time % 86400))
nextmorning=$((6*3600))
readonly=0
[ -w $prefix/system ] && readonly=1
ntpserver="stdtime.gov.hk"
ntpServerIP=
dns="114.114.114.114"
time_synced=1
timezone="+8"
sleeptime=60
[ -f $configfile ] && configLines=$(cat $configfile)


if [ ! -d "$(dirname $crontabfile)" ]; then
	mkdir -p $(dirname $crontabfile)
fi

#############################################################
##check busybox grep sed cut
errorflag=0
if ! which busybox >/dev/null; then
   echo "ERROR: Need busybox!"
   errorflag=1
fi
if ! which grep >/dev/null; then
   echo "ERROR: Need grep!"
   errorflag=1
fi
if ! which sed >/dev/null; then
   echo "ERROR: Need sed!"
   errorflag=1
fi
if ! which cut >/dev/null; then
   echo "ERROR: Need cut!"
   errorflag=1
fi

getLocalTime()
{
    local haveFMT=0
    for opt in $*;do
        if [ "${opt:0:2}" = "+%" -a "$opt" != "+%s" ]; then
           haveFMT=1
           break
        fi
    done
    local utc=$(date +%s)
    local result=""
    if [ "$timezone" = "" ]; then
        result=$utc
    else
        #expr $utc + $timezone \* 3600
        result=$(expr $utc + $timezone \* 3600)
    fi
    if [ $haveFMT -eq 0 ]; then
        echo "$result"
    else
        date $* -d "@$result"
    fi
    return 0
}

remove()
{
   [ $# -lt 1 ] && return
   if [ -d "$1" ]; then
      rm -r "$1"
   elif [ -f "$1" ]; then
      rm "$1"
   fi
}
getAppUID()
{
    [ $# -lt 1 ] && return 1
    if grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list >/dev/null 2>/dev/null; then
        grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list  | cut -d' ' -f2 | sed ':a;N;s/\n/,/;ba'
        return 0
    fi
    return 1
}

getAppName()
{
    [ $# -lt 1 ] && return 1
    if grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list >/dev/null 2>/dev/null; then
        grep "^[^[:space:]]*\.\{0,1\}$1[\.[:space:]]\{1,\}.*" $prefix/data/system/packages.list  | cut -d' ' -f1 | sed ':a;N;s/\n/,/;ba'
        return 0
    fi
    return 1
}

ApplyWhiteList()
{
   [ -f $prefix/data/property/lockAppNet.whitelist ] || return 1
   whitelist=$(cat $prefix/data/property/lockAppNet.whitelist)
   [ "$whitelist" != "" ] && echo "AppWhiteList:        $whitelist"
   itemcount=$(echo $whitelist | grep -o "," | wc -l)
   itemcount=$((itemcount + 1))
   [ "$whitelist" = "" ] && return 0
   local appname=""
   local appuid=""
   i=0
   until [ $i -lt 0 -o $i -gt $itemcount ]; do
       appname=$(echo "$whitelist" | cut -d, -f$i)
       if [ $? -eq 1 -o "$appname" = "" ]; then
              i=$(expr $i + 1)
              continue
       fi
       appuid=$(getAppUID $appname)
       if [ $? -eq 1 -o "$appuid" = "" ]; then
              i=$(expr $i + 1)
              continue
       fi
       k=0
       uidcount=$(echo $appuid | grep -o "," | wc -l)
       uidcount=$((uidcount + 1))
       until [ $k -gt $uidcount ]; do
            uiditem=$(echo $appuid| cut -d, -f$uidcount)
            iptables -A OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT
            k=$(expr $k + 1)
       done
       i=$(expr $i + 1)
   done
}

#mkcrontab(vday,vhour,vmin,vcommand)
mkcrontab()
{
  	if [ $# -lt 4 ]; then
		return
  	fi
        local vday="$1"
  	local vhour="$2"
  	local vmin="$3"
        local vcommand="$4"
        local line=""
        [ "$vcommand" = "" ] && vcommand="$0"
        [ "$vday" = "" ] && vday="*"
        [ "$vhour" = "" ] && vhour="*"
        [ "$vmin" = "" ] && vmin="*"
        [ "$vday" = "*" -a "$vhour" = "*" -a "$vmin" = "*" ] && return
        local newitem="$vmini\s\{1,\}$vhour\s\{1,\}*\s\{1\}*\s\{1,\}\S\{1,\}\s\{1,\}$0"
        local items=$(echo "$newitem" | sed -e "s/\*/\\\*/g" -e "s/\//\\//g")
        if ! echo "$crontabs" | grep  -q "$items" ; then
             line="$vmin	$vhour	*	*	$vday	$0"
        elif [ "$vday" = "*" ]; then
             newitem="\($vmin[[:space:]]+$vhour[[:space:]]+*[[:space:]]+*[[:space:]]+\)[^*]+\([[:space:]]+$0\)"
             items=$(echo "$newitem" | sed -e "s/\*/\\\*/g" -e "s/\//\\//g")
             line=$(echo -n "$crontabls" | sed -e "s/$items/\1\*\2/g")
        elif [ "$vday" != "*" ]; then
             newitem="$vmini\s\{1,\}$vhour\s\{1,\}*\s\{1\}*\s\{1,\}*\s\{1,\}$0"
             items=$(echo "$newitem" | sed -e "s/\*/\\\*/g" -e "s/\//\\//g")
             if ! (echo $crontabs | grep -q "$items"); then
                   line="$vmin        $vhour  *       *       $vday   $0"
             fi
        fi
        crontabs="${crontabs}\n${line}"
        #echo "$line" >> $crontabfile
}
now_in_time()
{
    if [ $# -lt 1 ]; then
        echo 1
        return 1
    fi
    local plans="$1"
    local timeif=1
    local j=1
    local i_plan_count=$(( $(echo "$plans" | grep  -o ';'| wc -l) + 1 ))

    until [ $j -lt 0 -o $j -gt ${i_plan_count} ]; do
    #        if [ $j -gt 1 ]; then
    #           echo "$plans" | grep -q ","
    #           [ $? -ne 0 ] && break
    #        fi
            local plani=$(echo "$plans"|cut -d';' -f$j | sed -e "s/[[:space:]]\{1,\} $//g" -e "s/^[[:space:]]\{1,\}//g" -e "s/[[:space:]]/ /g" -e "s/ \{2,\}/ /g")
            [ "$plani" = "" ] && break;
            local plani_item_count=$(( $(echo "$plani" | grep  -o ';'| wc -l) + 1 ))
            local plan_time=$(echo "$plani"|cut -d' ' -f1)
            local plan_day=$(echo "$plani"|cut -d' ' -f2)
            local plan_opt=$(echo "$plani"|cut -d' ' -f3)
            [ $plani_item_count -lt 2 ] && plan_day="*"
            [ $plani_item_count -lt 3 ] && plan_opt=""
            local ptime1=""
            local ptime2=""
	    local ptime1_hour=""
	    local ptime1_min=""
	    local ptime2_hour=""
	    local ptime2_min=""
            local timeifdi=""
            local timeifti=""
            if [ "$plan_time" != "" ]; then
                ptime1=$(echo "$plan_time"|cut -d- -f1)
                if echo "$plan_time"|grep -q "-"; then
                    ptime2=$(echo "$plan_time"|cut -d- -f2)
                fi
                if echo "$ptime1" | grep -q ":"; then
                    ptime1_hour=$(echo "$ptime1"|cut -d: -f1)
                    ptime1_min=$(echo "$ptime1"|cut -d: -f2)
                    ptime1=$(($ptime1_hour*3600+$ptime1_min*60))
                elif [ "$ptime1" != "*" ]; then
                    ptime1=$(($ptime1*3600))
                fi
                if echo "$ptime2" | grep -q ":"; then
                    ptime2_hour=$(echo "$ptime2"|cut -d: -f1)
                    ptime2_min=$(echo "$ptime2"|cut -d: -f2)
                    ptime2=$(($ptime2_hour*3600+$ptime2_min*60))
                elif [ "$ptime2" != "*" -a "$ptime2" != "" ]; then
                    ptime2=$(($ptime2*3600))
                fi
            fi

            local pday2=""
            local pday1=""

            if [ "$plan_day" != "" ]; then
                 if echo "$plan_day" | grep -q "," ; then
                     pday1=$(echo "$plan_day" | cut -d, -f1)
                     pday2=$(echo "$plan_day" | cut -d, -f2)
                 else
                     pday1=$(echo "$plan_day"|cut -d- -f1)
                     if echo "$plan_day"|grep -q "-"; then
                         pday2=$(echo "$plan_day"|cut -d- -f2)
                     fi
                 fi
            fi

            [ "$ptime1_hour" != "" -a "$ptime1_min" != "" ] && mkcrontab "$plan_day" "$ptime1_hour" "$ptime1_min" "$0"
            [ "$ptime2_hour" != "" -a "$ptime2_min" != "" ] && mkcrontab "$plan_day" "$ptime2_hour" "$ptime2_min" "$0"
            #[ "$ptime2_hour" != "" -a "$ptime2_min" != ""  -a "$plan_opt" != "-" ] && mkcrontab "$plan_day" "$ptime1_hour-$ptime2_hour" "*/5" "$0"

            if [ $timeif -eq 0 -o $timeif -eq 2 ]; then
                    j=`expr $j + 1`
                    continue
            fi
            if [ "$pday1" != "*" -a "$pday1" != "" ]; then
                if echo "$plan_day" | grep -q ','; then
                    local iday=1
                    local day_count=$(( $(echo "$plan_day" | grep  -o ','| wc -l) + 1 ))
                    timeifdi=""
                    until [ $iday -lt 0 -o $iday -gt ${day_count} ]; do
                         item_day=$(echo "$plan_day"|cut -d, -f $iday)
                         if [ "$item_day" != "" ]; then
                             [ "$timeifdi" != "" ] && timeifdi="$timeifdi -a "
                             timeifdi="$timeifdi $day -eq $item_day"
                         fi
                         iday=$(expr $iday + 1)
                    done
                else
                    if [ "$pday2" = ""  ]; then
                        timeifdi="$day -eq $pday1"
                    else
                        timeifdi="$day -ge $pday1 -a $day -le $pday2"
                    fi
                fi
            elif [ "$pday1" = "*" ]; then
                timeifdi=0
            fi

            if [ "$ptime2" = "" -a "$ptime1" != "*" ]; then
                timeifti="$timeinday -ge $ptime1 -o $timeinday -le $nextmorning"
            elif [ "$ptime1" != "*" ]; then
                if [ $ptime2 -ge $ptime1 ]; then
                    timeifti="$timeinday -ge $ptime1 -a $timeinday -le $ptime2"
                else
                    timeifti="$timeinday -ge $ptime1 -o $timeinday -le $ptime2"
                fi
            elif [ "$ptime1" == "*" ]; then
                timeifti=0
            fi
            local timeifi=1
            if [ "$timeifdi" != "" -a "$timeifti" != "" ]; then
                [ $timeifdi ] && [ $timeifti ] && timeifi=0
            elif [ "$timeifdi" != "" ]; then
                [ $timeifdi ] && timeifi=0
            elif [ "$timeifti" != "" ]; then
                [ $timeifti ] && timeifi=0
            else
                j=`expr $j + 1`
                continue
            fi

            if [ $timeifi -eq 0 ]; then
                if [ "$plan_opt" = "-" ]; then
                   timeif=2
                else
                   timeif=0
                fi
            fi
            j=`expr $j + 1`
    done
    [ "$timeif" -eq 2 ] && timeif=1
    echo $timeif
}

getServerIP()
{
    [ $# -lt 1 ] && return
    if [ -f /proc/net/stat/arp_cache ]; then
        local num;
        ((num=16#$(cat /proc/net/stat/arp_cache | cut -d' ' -f1 | sed -n '2p')))
        [ 0$num -lt 1 ] && return 
    fi
    local j=1
    local server_count=$(( $(echo "$1" | grep  -o ','| wc -l) + 1 ))
    local serverIP=""

    until [ $j -lt 0 -o $j -gt ${server_count} ]; do
        local iServer=$(echo "$1" | cut -d, -f$j )
        local ns=$(nslookup "$iServer" "$dns" 2>/dev/null | sed "1,3d" | grep "Address" | grep -v ":\{2,\}" | cut -d: -f2 | sed "s/^ //g" | cut -d' ' -f1 | sed ':a;N;s/\n/,/;ta' )

        if echo $ns | grep -qv 'nslookup'; then
           [ "$ns" != "" ] && serverIP="${serverIP}\n${ns}"
        fi
        j=`expr $j + 1`
    done
    if [ "$serverIP" != "" ]; then
        echo -e "$serverIP" |  sed ':a;N;s/\n/,/;ta' | sed "s/^,//"
        return 0
    else
        echo ""
        return 1
    fi
}

SyncTime()
{
    if [ -f /proc/net/stat/arp_cache ]; then
            local num;
            ((num=16#$(cat /proc/net/stat/arp_cache | cut -d' ' -f1 | sed -n '2p')))
            if [ 0$num -lt 1 ]; then
                  time_synced=-1
                  return
            fi
    fi

    if [ $time_synced -ne 0 ]; then
        #echo "ntpServerIP=$ntpServerIP"
        if [ "$ntpServerIP" = "" ]; then
             local ntpserverip=$(getServerIP "$ntpserver" | tac | head -1)
             if [ "$ntpserverip" != "" ]; then
                  #setprop android.lockAppNet.ntpServerIP "$ntpserverip"
                  ntpServerIP="$ntpserverip"
             fi
        fi
        if [ "$ntpServerIP" != "" ]; then
             if [ "`which ntpd`" != "" ]; then
                 ntpd -qNn -p `echo "$ntpServerIP" | sed "s/,/ -p /g"`
                 if [ $? -eq 0 ]; then
                         time_synced=0
                         hwclock -w -u
                         return 0
                 fi
             else
                 local c=$(( $(echo "$ntpServerIP" |  grep  -o ','| wc -l) + 1 ))
                 local k=1
                 until [ $k -gt $c ]; do
                     local cur=$(echo "$ntpServerIP" | cut -d, -f$k)
                     rdate -s $cur
                     if [ $? -eq 0 ]; then
                         time_synced=0
                         hwclock -w -u
                         k=$(expr $c + 1)
                         return 0
                     else
                         k=$(expr $k + 1)
                     fi
                 done
             fi
        fi
        time_synced=-1
        return 1
    fi
}

check_netlock()
{
          #check network lock is opened,if opened,do not disable network
          netlock=`getprop android.network.lockAppNet`
          if [  "$netlock" = "" ]; then
              netlock=1
              setprop android.network.lockAppNet 1
          elif [ "$netlock" = "0" ]; then
              local offtime=`getprop android.lockAppNet.offtime`
              if [ "$offtime" != "" ]; then
                  local nowtime=`date +%s`
                  local offtos=`getprop android.lockAppNet.offto`
                  if [ "$offto" = "" ]; then 
                      local timediff=$(($nowtime - $offtime))
                      if [ $timediff -ge 3600 -o $timediff -lt 0 ]; then
                            setprop android.lockAppNet.offtime ""
                            setprop android.network.lockAppNet 1
                            netlock=1
                      fi
                   else
                        nowtime=$(getLocalTime +%s)
                        local offto=$(getLocalTime +%s $offtos)
                        local timediff=$(($nowtime - $offto))
                        if [ $timediff -ge 0 ]; then
                             setprop android.lockAppNet.offtime ""
                             setprop android.network.lockAppNet 1
                             setprop android.lockAppNet.offto ""
                             netlock=1
                        fi
                   fi
              fi
          fi
}
###############################################################
lockAppNetRun()
{
     local whitelist=""
     local blockname=""
     local ruleClassName=""
     local whitelist=""
     local globalNet=0
     echo "   Time: $(getLocalTime +%H:%M:%S)"
     echo "==========================================="
     check_netlock

     echo "$configLines" | while read Line; do
        Line=$(echo "$Line" | sed -e "s/#.*$//g" -e "s/^[[:space:]]\{1,\}//g" -e "s/[[:space:]]\{1,\}$//g")
        if echo "$Line" | grep -q "^[[:space:]]*#"; then
             continue;
        elif echo "$Line" | grep -q "^[[:space:]]*$"; then
             continue;
        fi
        if echo "$Line" |  grep -q "[[:space:]]*\[\{1,\}.*\]\{1,\}[[:space:]]*$"; then
             blockname=$(echo "$Line"|sed "s/[[:space:]]*\[\{1,\}[[:space:]]*\(.*\)[[:space:]]*\]\{1,\}[[:space:]]*$/\1/")
             continue;
        fi
        local lockhost=$(echo "$Line"|sed -e "s/[[:space:]]*\([[:graph:]]\{1,\}\)[[:space:]=]\{1,\}\(.*\)/\1\$\2/" )
        [ "$lockhost" = "" ] && break
        if ! echo "${lockhost}" | grep -q "\$" ; then
             continue
        fi
        local hostname=$(echo "${lockhost}"|cut -d$ -f1)
        local rulename=""
        
        if [ "$hostname" = "HOLIDAYS" -a "$blockname" = "Main" ]; then
            local holidays=$(echo "${lockhost}"|cut -d$ -f2)
            local j=1
            until [ $j -lt 0 -o $j -gt 100 ]; do
                if [ $j -gt 1 ]; then
                    echo "$holidays" | grep -q ","
                    [ $? -ne 0 ] && break
                fi
                local holidayi=$(echo "$holidays" | cut -d, -f$j)
                [ "$holidayi" = "" ] && break
                local holidayi1=$(echo "$holidayi" | cut -d- -f1)
                local holidayi2=""
                if echo "$holidayi" | grep -q "-"; then
                      holidayi2=$(echo "$holidayi" | cut -d- -f2)
                      if [ $today -ge $holidayi1 -a $today -le $holidayi2 ]; then
                          ruleClassName="holiday"
                          break;
                      fi
                elif [ $today -eq $holidayi1 ]; then
                      ruleClassName="holiday"
                      break;
                fi
                j=$(expr $j + 1)
            done
            continue
        elif [ "$hostname" = "CONFIG_URL" -a $# -gt 1 -a "$1" = "-u"  -a "$blockname" = "Main" ]; then
            local config_url=$(echo "${lockhost}" | cut -d$ -f2)
            if wget -O $prefix/data/system/lockAppNet.conf.tmp  ${config_url}; then
                 mv $prefix/data/system/lockAppNet.conf.tmp $prefix/data/system/lockAppNet.conf
            fi
            exit
        elif [ "$hostname" = "UPDATE_URL" -a $# -gt 1 -a "$1" = "-u"  -a "$blockname" = "Main" ]; then
            local update_url=$(echo "${lockhost}" | cut -d$ -f2)
            if wget -O $prefix/data/system/lockAppNet.tgz.tmp  ${update_url}; then
                 [ -w $prefix/system ] || mount -o remount,rw $prefix/system
                 cd /system
                 tar xzf $prefix/data/system/lockAppNet.tgz.tmp
                 rm $prefix/data/system/lockAppNet.tgz.tmp
                 [ -w $prefix/system ] && mount -o remount,ro /system
             fi
            exit
        elif [ "$hostname" = "NTPSERVER" -a "$blockname" = "Main" -a "$ntpServerIP" = "" ]; then
            ntpserver=$(echo "${lockhost}"|cut -d$ -f2)
            local ntpserverip=$(getServerIP "$ntpserver" | tac | head -1)
            ntpServerIP=$ntpserverip
            continue
        elif [ "$hostname" = "TIMEZONE" -a "$blockname" = "Main" ]; then
            timezone=$(echo "${lockhost}"|cut -d$ -f2 | sed "s/[[:space:]]*\([+-]\{0,1\}[[:digit:]]\{1,2\}\)[[:space:]]*/\1/")
            #echo "Timezone=$timezone   Now: $(getLocalTime +%H:%M:%S)"
            time=$(getLocalTime +%s)
            timeinday=$(( $time % 86400 ))                                                                         
            continue
        elif [ "${hostname:0:13}" = "APP_WHITELIST"  -a "$blockname" = "Main" ]; then
             whitelist="$whitelist"$(echo "${lockhost}"|cut -d$ -f2)
             #echo "- Apply: $Line"
             continue
        elif [ "$blockname" = "Network" ]; then
        #######################################################
            [ $time_synced -eq 1 ] && SyncTime
     
            if echo "$hostname" | grep -q ":"; then
                rulename=$(echo "$hostname" | cut -d\: -f1)
                hostname=$(echo "$hostname" | cut -d\: -f2)
            fi
            skipme=0
            
            if [ "$ruleClassName" = "" -o  "$ruleClassName" = "default" ]; then
                [ "$rulename" != "" -a "$rulename" != "default" ] && skipme=1
            elif [ "$ruleClassName" != "$rulename" ]; then
                skipme=1
            fi
            if [ $skipme -eq 1 ]; then
                echo " -  Skip : $Line"
                continue
            fi
            if [ $netlock -eq 0 ]; then
                 echo " -  Disable Rule: $Line"
            elif [ $netlock -eq 1 ]; then
                 echo "->  Apply Rule: $Line"
            fi
            local plans=$(echo "${lockhost}"|cut -d$ -f2)
            if [ "${hostname}" != "*" ]; then
                if ! grep -q "127\.0\.0\.1.*${hostname}" ${hostsconfig}; then
                    [ -w $prefix/system ] || mount -o remount,rw $prefix/system
                    [ -f ${hostsconfig} ] || echo "" >> ${hostsconfig}
                    echo "127.0.0.1      ${hostname}" >> ${hostsconfig}
                fi
            fi
            local timeif=1
            timeif=$(now_in_time "$plans")
     
            globalNet=$(getprop lockAppNet.globalNet)
            if [ $timeif -eq 1 -a $netlock -eq 1 ] ; then
                  if [ "${hostname}" != "*" ]; then
                      if grep -q "^#.*${hostname}" ${hostsconfig}; then
                          [ -w $prefix/system ] || mount -o remount,rw $prefix/system
                          sed -e "s/#*\([^#]*${hostname}.*\)/\1/g" -i ${hostsconfig}
                      fi
                      echo "    -- $hostname===>disabled"
                  elif [ "$globalNet" != "1" -a "$globalNet" != "2" ]; then
                      setprop lockAppNet.globalNet 1
                      iptables -F
                      iptables -P OUTPUT DROP
                      iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
                      # allow DNS
                      ##iptables -A OUTPUT -p udp -m udp --dport 53 -j ACCEPT
                      iptables -A OUTPUT -p 17 -m udp --dport 53 -j ACCEPT
                      # allow SNTP/NTP
                      ##iptables -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT
                      ##iptables -A OUTPUT -p tcp -m tcp --dport 123 -j ACCEPT
                      iptables -A OUTPUT -p 17 -m udp --dport 123 -j ACCEPT
                      iptables -A OUTPUT -p 6 -m tcp --dport 123 -j ACCEPT
                      # all rdate
                      ##iptables -A OUTPUT -p udp -m udp --dport 37 -j ACCEPT
                      ##iptables -A OUTPUT -p tcp -m tcp --dport 37 -j ACCEPT
                      iptables -A OUTPUT -p 17 -m udp --dport 37 -j ACCEPT
                      iptables -A OUTPUT -p 6 -m tcp --dport 37 -j ACCEPT
                      # allow ping
                      #iptables -A OUTPUT -p icmp --icmp-type 8 -j ACCEPT
                      iptables -A OUTPUT -p 1 -j ACCEPT
                      ApplyWhiteList
                      echo "    --Network is disabled!"
                  fi
             else
                  if [ "${hostname}" != "*" ]; then
                      if ! grep -q "^#.*${hostname}" ${hostsconfig}; then
                          [ -w $prefix/system ] || mount -o remount,rw $prefix/system
                          sed -e "s/\([^#]*${hostname}.*\)/#\1/g" -i ${hostsconfig}
                      fi
                      echo "   --$hostname===>enabled"
                  elif [ "$globalNet" != "1" -a "$globalNet" != "2" ]; then
                      setprop lockAppNet.globalNet 2
                      iptables -F
                      iptables -P OUTPUT ACCEPT
                      echo "   --Network is enabled!"
                  fi
             fi
         elif  [ "$blockname" = "Application" ]; then
         #################################################
            [ $time_synced -eq 1 ] && SyncTime
     
            local appname=${hostname}
            local appuid=$(getAppUID $appname)
            if [ $? -eq 1 -o "$appuid" = "" ]; then
                   continue
            fi
            local k=0
            local uidcount=$(echo $appuid | grep -o "," | wc -l)
            uidcount=$((uidcount + 1))
            local plans=$(echo "${lockhost}"|cut -d$ -f2)
            local timeif=1
            until [ $k -ge $uidcount ]; do
                 local uiditem=$(echo $appuid| cut -d, -f$uidcount)
                 timeif=$(now_in_time "$plans")
     
                 if [ "$timeif" = "1" -a $netlock -eq 1 ]; then
                      iptables -D OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT > /dev/null 2>/dev/null
                      iptables -A OUTPUT -m owner --uid-owner  $uiditem -j REJECT
                      echo "   --Disabled $appname"
                 else
                      iptables -D OUTPUT -m owner --uid-owner  $uiditem -j REJECT > /dev/null 2>/dev/null
                      iptables -A OUTPUT -m owner --uid-owner  $uiditem -j ACCEPT
                      echo "   --Enabled $appname"
                 fi
                 k=$(expr $k + 1)
            done
     
         fi
     
     done
     echo ""
     setprop lockAppNet.globalNet ""
     #[ -w $prefix/system ] && mount -o remount,ro $prefix/system
}

##isOnTimeIF <mode> <now item> <crontab item>   
isOnTimeIF()
{
     [ $# -lt 3 ] && return 1
     local mode="$1"
     local nnum="$2"
     local snum="$3"
     if echo "$snum" | grep -q '-'; then
         local cnum1=$(echo "$snum" | cut -d- -f1)
         local cnum2=$(echo "$snum" | cut -d- -f2)
         if [ $nnum -ge $cnum1 -a $nnum -le $cnum2 ]; then
               return 0
         else
               return 1
         fi
     elif echo "$snum" | grep -q ','; then
         local ci=$(( $(echo "$snum" |  grep  -o ','| wc -l) + 1 ))
         local k=1
         local sif="1 -eq 1"
         until [ $k -gt $ci ]; do
             local cnumi=$(echo "$snum" | cut -d, -f1)
             sif="$sif -o $nnum -eq $cnumi"
             k=$(expr $k + 1)
         done
         if [ $sif ]; then
             return 0
         else
             return 1
         fi
     elif echo "$snum" | grep -q "/"; then
          local cnum2=$(echo "$snum" | cut -d'/' -f2)
          local len=1
          if [ "$mode" = "minute" ]; then
                  len=60
          elif [ "$mode" = "hour" ]; then
                  len=24
          elif [ "$mode" = "day" ]; then
                  len=31
          elif [ "$mode" = "week" ]; then
                  len=7
          fi
          
          local m1=$(expr $nnum % $cnum2)
          local m2=$(expr $len % $cnum2)
          if [ $m1 -eq $m2 ]; then
               return 0
          else
               return 1
          fi
      else
          if [ "$snum" = "*" ];  then
              return 0
          else
              local offset=0
              [ "$mode" = "minute" ] && offset=$(expr $sleeptime / 60 + 1)
              local tmin=$(expr $snum - $offset)
              local tmax=$(expr $snum + $offset)
              if [ "$nnum" -gt "$tmin" -a $nnum -lt "$tmax" ]; then
                    return 0
              fi
              return 1
          fi
      fi 
      return 1
}
lockAppNetCrond()
{
    local t1=0
    local t2=$(getLocalTime)
    local onetlock=""
    until [ 1 -eq 2 ]; do
          local ndebug=$(getprop android.lockAppNet.debug)
          if [ "$ndebug" != "$debug" ]; then
              if [ "$ndebug" = "1" ]; then
                 OUTPUTFILE=$LOGFILE
                 remove "$LOGFILE"
                 touch $OUTPUTFILE
                 OUTPUT=" >> $OUTPUTFILE"
              else
                 OUTPUT=""
              fi
              debug=$ndebug
          fi
          onetlock=$netlock
          check_netlock
          [ $time_synced -ne -1 ] && t1=$t2
          sleep $sleeptime
          t2=$(getLocalTime)
          local minute=$(date +%M -d "@$t2")
          local hour=$(date +%H -d "@$t2")
          local day=$(date +%m -d "@$t2")
          local weekday=$(date +%w -d "@$t2")
          local dt=$(expr $t2 - $t1)
          local time_disparity=1
          [ $dt -gt $(expr 300 + $sleeptime) -o $dt -lt $(expr -300 - $sleeptime) ] && time_disparity=0
          if [ $time_disparity -eq 0 -o "$onetlock" != "$netlock" ]; then
               if [ $time_disparity -eq 0 ]; then
                    eval echo ":: time disparity of $dt seconds detected!" $OUTPUT
                    eval SyncTime $OUTPUT
                    sleep 10
               elif [ "$onetlock" != "$netlock" ]; then
                     onetlock=$netlock
               fi
               eval lockAppNetRun $OUTPUT
          else
               echo "$crontabs" | while read Line;do
                     Line=$(echo "$Line" | sed "s/#.*$//g")
                     if echo "$Line" | grep -q "^[[:space:]]*#"; then
                          continue;
                     elif echo "$Line" | grep -q "^[[:space:]]*$"; then
                          continue;
                     fi
                     Line=$(echo "$Line" | sed -e "s/[[:space:]]\{1,\}/ /g" -e "s/^[[:space:]]\{1,\}//g" -e "s/[[:space:]]\{1,\}$//g")
                     local csmin=$(echo "$Line" | cut -d' ' -f1)
                     local cshour=$(echo "$Line" | cut -d' ' -f2)
                     local csday=$(echo "$Line" | cut -d' ' -f3)
                     local csweek=$(echo "$Line" | cut -d' ' -f4)
                     local cscmd=$(echo "$Line" | cut -d' ' -f5)
                     [ "$csmin" = "" -o "$cshour" = "" -o "$csday" = "" -o "$csweek" = "" -o "$cscmd" = "" ] && continue
                     if [ "$csweek" != "*" ]; then
                           csday="*"
                     elif [ "$csday" != "*" ]; then
                           csweek="*"
                     fi
                     isOnTimeIF "minute" "$minute" "$csmin"
                     local ifmin=$?
                     isOnTimeIF "hour" "$hour" "$cshour"
                     local ifhour=$?
                     isOnTimeIF "day" "$day" "$csday"
                     local ifday=$?
                     isOnTimeIF "week" "$weekday" "$csweek"
                     local ifweek=$?
                     if [ $ifmin -eq 0 -a $ifhour -eq 0 -a $ifday -eq 0 -a $ifweek -eq 0 ]; then
                           eval echo "Cron Task running: $Line" $OUTPUT
                           eval lockAppNetRun $OUTPUT
                     fi 
                     ######################
               done
          fi
    done  
    echo ""
}
##====================  main  ================
if [ "$debug" = "1" ]; then
     OUTPUTFILE="$LOGFILE"
     echo "## OUTPUT redirect to $OUTPUTFILE!"
     [ ! -f "$OUTPUTFILE" ] && touch "$OUTPUTFILE"
     OUTPUT=" >> $OUTPUTFILE"
else
     OUTPUT=""
fi
                                                                               
eval lockAppNetRun $OUTPUT
[ $daemon -eq 1 ] && lockAppNetCrond

setprop android.lockAppNet.pid ""
exit 0
